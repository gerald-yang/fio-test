heat_template_version: 2015-04-30

description: >
  Create VM for running fio auto test

parameters:
  key_name:
    type: string
    description: SSH key name
    default: centos7-fio-test-key

  image_name:
    type: string
    label: Test image name
    description: Image name
    default: centos7-fio-test

  public_net:
    type: string
    description: Public network
    default: public_net

  private_net_name:
    type: string
    description: Test private network
    default: test_private_net

  private_net_cidr:
    type: string
    description: Test private network address
    default: 192.168.1.0/24

  private_net_gateway:
    type: string
    description: Test private network gateway
    default: 192.168.1.1

  private_net_pool_start:
    type: string
    description: Start IP address of test private network
    default: 192.168.1.2

  private_net_pool_end:
    type: string
    description: End IP address of test private network
    default: 192.168.1.4

  dns_addr:
    type: string
    description: DNS
    default: 8.8.8.8

resources:
  keypair:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: key_name }
      save_private_key: true

  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      dns_nameservers: [ { get_param: dns_addr } ]
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  test_flavor:
    type: OS::Nova::Flavor
    properties:
      name: testflavor
      ram: 1024
      vcpus: 1
      disk: 8

  all_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 1
          port_range_max: 65535
          direction: ingress
          ethertype: IPv4
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 1
          port_range_max: 65535
          direction: egress
          ethertype: IPv4
        - protocol: udp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 1
          port_range_max: 65535
          direction: ingress
          ethertype: IPv4
        - protocol: udp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 1
          port_range_max: 65535
          direction: egress
          ethertype: IPv4
        - protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          ethertype: IPv4
        - protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
          direction: egress
          ethertype: IPv4

  instance_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        - { get_resource: all_secgroup }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: instance_port }

  test_volume:
    type: OS::Cinder::Volume
    properties:
      size: 2
      availability_zone: nova

  valume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: test_volume }
      instance_uuid: { get_resource: test_instance }
      mountpoint: /dev/vdb

  test_instance:
    type: OS::Nova::Server
    properties:
      availability_zone: nova
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_resource: test_flavor }
      networks:
        - port: { get_resource: instance_port }
      user_data: { get_file: test.sh }

outputs:
  instance_private_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [test_instance, first_address] }

  instance_public_ip:
    description: IP address of public network
    value: { get_attr: [ floating_ip, floating_ip_address ] }


